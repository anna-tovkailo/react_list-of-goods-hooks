{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortField","goodsFromServer","App","useState","NONE","sortField","setSortField","isReversed","setIsReversed","visibleGoods","goods","preparedGoods","sort","good1","good2","ALPHABET","localeCompare","LENGTH","length","reverse","getPreparedGoods","className","type","classNames","onClick","hidden","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAKKA,E,oFAAAA,O,uBAAAA,I,mBAAAA,I,gBAAAA,M,KAME,IAAMC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAkCK,IAAMC,EAAgB,WAC3B,MAAkCC,mBAASH,EAAUI,MAArD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KACMC,EA7BR,SACEC,EADF,GAGG,IADCL,EACF,EADEA,UAAWE,EACb,EADaA,WAEPI,EAAa,YAAOD,GAmB1B,OAjBAC,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQT,GACN,KAAKL,EAAUe,SACb,OAAOF,EAAMG,cAAcF,GAE7B,KAAKd,EAAUiB,OACb,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAITX,GACFI,EAAcQ,UAGTR,EAMcS,CAAiBnB,EACpC,CAAEI,YAAWE,eAEf,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,SACA,UACA,CAAE,WAAYlB,IAAcL,EAAUe,WAExCS,QAAS,kBAAMlB,EAAaN,EAAUe,WAPxC,iCAYA,wBACEO,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,WAAYlB,IAAcL,EAAUiB,SAExCO,QAAS,kBAAMlB,EAAaN,EAAUiB,SAPxC,4BAYA,wBACEK,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,YAAahB,IAEjBiB,QAAS,kBAAMhB,GAAeD,IAPhC,qBAYA,wBACEe,KAAK,SACLD,UAAWE,IACT,SACA,YACA,WACA,CAAEE,OAAQpB,IAAcL,EAAUI,OAEpCoB,QAAS,kBAAMlB,EAAaN,EAAUI,OARxC,sBAcF,6BACGK,EAAaiB,KAAI,SAAAC,GAAI,OACpB,oBACE,UAAQ,OADV,SAIGA,GAFIA,YClHjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.e76f7738.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nenum SortField {\n  ALPHABET,\n  LENGTH,\n  NONE,\n}\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\ntype ReorderOptions = {\n  sortField: SortField,\n  isReversed: boolean,\n};\n\nfunction getPreparedGoods(\n  goods: string[],\n  { sortField, isReversed }: ReorderOptions,\n) {\n  const preparedGoods = [...goods];\n\n  preparedGoods.sort((good1, good2) => {\n    switch (sortField) {\n      case SortField.ALPHABET:\n        return good1.localeCompare(good2);\n\n      case SortField.LENGTH:\n        return good1.length - good2.length;\n\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState(SortField.NONE);\n  const [isReversed, setIsReversed] = useState(false);\n  const visibleGoods = getPreparedGoods(goodsFromServer,\n    { sortField, isReversed });\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-info',\n            { 'is-light': sortField !== SortField.ALPHABET },\n          )}\n          onClick={() => setSortField(SortField.ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-success',\n            { 'is-light': sortField !== SortField.LENGTH },\n          )}\n          onClick={() => setSortField(SortField.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-warning',\n            { 'is-light': !isReversed },\n          )}\n          onClick={() => setIsReversed(!isReversed)}\n        >\n          Reverse\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-danger',\n            'is-light',\n            { hidden: sortField === SortField.NONE },\n          )}\n          onClick={() => setSortField(SortField.NONE)}\n        >\n          Reset\n        </button>\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li\n            data-cy=\"Good\"\n            key={good}\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","// import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}